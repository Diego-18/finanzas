<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1,shrink-to-fit=no"><meta name="theme-color" content="#000000"><link rel="manifest" href="https://app.getpocket.com/manifest.json"><link rel="shortcut icon" href="https://app.getpocket.com/favicon.ico"><link href="user.php_files/css.css" rel="stylesheet"><link href="user.php_files/css_002.css" rel="stylesheet"><link href="user.php_files/css_003.css" rel="stylesheet"><link rel="stylesheet" href="user.php_files/font_002.css"><link rel="stylesheet" href="user.php_files/font_006.css"><link rel="stylesheet" href="user.php_files/font_004.css"><link rel="stylesheet" href="user.php_files/font.css"><link rel="stylesheet" href="user.php_files/font_007.css"><link rel="stylesheet" href="user.php_files/font_005.css"><link rel="stylesheet" href="user.php_files/font_003.css"><title>Pocket</title><style>/*! sanitize.css v6.0.0 | CC0 License | github.com/csstools/sanitize.css */*,::after,::before{background-repeat:no-repeat;box-sizing:border-box}::after,::before{text-decoration:inherit;vertical-align:inherit}html{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Oxygen,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";line-height:1.15;cursor:default;tab-size:4;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;word-break:break-word}body{margin:0}h1{font-size:2em;margin:.67em 0}hr{height:0;overflow:visible}main{display:block}nav ol,nav ul{list-style:none}pre{font-family:Menlo,Consolas,Roboto Mono,Ubuntu Monospace,Oxygen Mono,Liberation Mono,monospace;font-size:1em}a{background-color:transparent}abbr[title]{text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:Menlo,Consolas,Roboto Mono,Ubuntu Monospace,Oxygen Mono,Liberation Mono,monospace;font-size:1em}small{font-size:80%}::-moz-selection{background-color:#b3d4fc;color:#000;text-shadow:none}::selection{background-color:#b3d4fc;color:#000;text-shadow:none}audio,canvas,iframe,img,svg,video{vertical-align:middle}audio,video{display:inline-block}audio:not([controls]){display:none;height:0}img{border-style:none}svg{fill:currentColor}svg:not(:root){overflow:hidden}table{border-collapse:collapse}button,input,select{margin:0}button,input,select,textarea{font-family:inherit;font-size:inherit;line-height:inherit}button{overflow:visible;text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}fieldset{padding:.35em .75em .625em}input:focus{outline:0}legend{color:inherit;display:table;max-width:100%;white-space:normal}progress{display:inline-block;vertical-align:baseline}select{text-transform:none}textarea{margin:0;overflow:auto;resize:vertical}[type=checkbox],[type=radio]{padding:0}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}dialog{background-color:#fff;border:solid;color:#000;display:block;height:-moz-fit-content;height:-webkit-fit-content;height:fit-content;left:0;margin:auto;padding:1em;position:absolute;right:0;width:-moz-fit-content;width:-webkit-fit-content;width:fit-content}dialog:not([open]){display:none}summary{display:list-item}canvas{display:inline-block}template{display:none}[tabindex],a,area,button,input,label,select,summary,textarea{-ms-touch-action:manipulation;touch-action:manipulation}[hidden]{display:none}[aria-busy=true]{cursor:progress}[aria-controls]{cursor:pointer}[aria-disabled],[disabled]{cursor:disabled}[aria-hidden=false][hidden]:not(:focus){clip:rect(0,0,0,0);display:inherit;position:absolute}</style><style>html{text-rendering:optimizeLegibility;overflow-y:scroll}body{margin:0;font-family:'Graphik Web',-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen-Sans,Ubuntu,Cantarell,'Helvetica Neue',Helvetica,sans-serif}.navPlaceholder{border:1px solid #e7e7e7;border-bottom-color:#e7e7e7;border-bottom-style:solid;border-bottom-width:1px;background-color:#fdfdfd;border-radius:0;width:100%;height:63px;font-size:1em;position:fixed;top:0;left:0;text-align:center;display:flex;justify-content:space-between;align-items:center;color:#b1b2b2;border-bottom:#e7e7e7;box-shadow:0 0 1px rgba(0,0,0,.5);z-index:10}.navBlock{padding:0 2em;font-size:1.06em;font-weight:400;color:#444}</style><link href="user.php_files/5.css" rel="stylesheet"><style data-emotion="css"></style><script charset="utf-8" src="user.php_files/0.js"></script><script charset="utf-8" src="user.php_files/1.js"></script><script charset="utf-8" src="user.php_files/2.js"></script><script charset="utf-8" src="user.php_files/10.js"></script><script charset="utf-8" src="user.php_files/6.js"></script><script charset="utf-8" src="user.php_files/7.js"></script></head><body style="background-color: rgb(255, 255, 255);"><div id="root"><div class="css-3cvb8h"><div class="css-134evwy"><div class="css-1eipii7"><div style="transform: translateX(-48.633%);"></div></div><div class="css-wm2fr9"><div class="css-11yd3hn"><div class="css-1h5x3dy"><button aria-label="Go Back" data-tooltip="Go Back" class="css-1b48ly4"><svg class="css-terf6c"><use xlink:href="/symbols/line.symbols-1366548e.svg#BackArrow"></use></svg></button></div></div><div style="justify-content: center;" class="css-11yd3hn"><button aria-label="Etiqueta" data-tooltip="Etiqueta" class="css-mb3t3r"><svg class="css-terf6c"><use xlink:href="/symbols/line.symbols-1366548e.svg#AddTags"></use></svg></button><button aria-label="Favorito" data-tooltip="Favorito" class="css-mb3t3r"><svg class="css-terf6c"><use xlink:href="/symbols/line.symbols-1366548e.svg#Favorite"></use></svg></button><button aria-label="Archivar" data-tooltip="Archivar" class="css-mb3t3r"><svg class="css-terf6c"><use xlink:href="/symbols/line.symbols-1366548e.svg#Archive"></use></svg></button><button aria-label="Eliminar" data-tooltip="Eliminar" class="css-mb3t3r"><svg class="css-terf6c"><use xlink:href="/symbols/line.symbols-1366548e.svg#Delete"></use></svg></button><div class="css-1dgld9d"><div class="css-1u3mvjt"><div class="trigger css-amu9cl"><button aria-label="Share" data-tooltip="Share" class="css-mb3t3r"><svg class="css-terf6c"><use xlink:href="/symbols/line.symbols-1366548e.svg#IOSShare"></use></svg></button></div></div></div></div><div class="css-mk5p2j"><div class="css-1dgld9d"><div class="css-1u3mvjt"><div class="trigger css-amu9cl"><div data-tooltip="Opciones de aspecto" class="css-7qs7j4"><svg class="css-7815f8"><use xlink:href="/symbols/solid.symbols-dcc368f1.svg#TextStyle"></use></svg><svg class="css-1n4kd1x"><use xlink:href="/symbols/mini.symbols-ea31da4e.svg#DownChevron"></use></svg></div></div></div></div></div></div></div><div class="css-12lf39s"><div class="css-ov1ktg"><div font-size="26" font-family="Blanco" class="css-z6hwdn"><header class="css-d92687"><h1 class="css-ing846">Rest API Authentication Example in PHP – JWT Tutorial</h1><div class="css-15z47vx"><div class="css-7kp13n">De</div> <div class="css-7ol5x1"><span class="css-acjdas">Mike Dalisay</span></div><div class="css-8rl9b7">codeofaninja.com</div><div class="css-zskk6u">5 min</div></div><div class="css-1yltisf"><a href="https://getpocket.com/redirect?url=https%3A%2F%2Fwww.codeofaninja.com%2F2018%2F09%2Frest-api-authentication-example-php-jwt-tutorial.html" target="_blank" class="css-p83qbl">Ver original</a></div></header><div class="css-429vn2"><div font-size="6" role="main" class="css-q7xgeq">
		<div id="RIL_container">
			
			<div id="RIL_header">
				
				<h1>Rest API Authentication Example in PHP – JWT Tutorial</h1>
				<cite>by <a class="RIL_author" href="">Mike Dalisay</a>, <a href="http://codeofaninja.com/">codeofaninja.com</a><span class="RIL_date"><br class="RIL_date_sep">September 20, 2018 </span></cite>
			</div>
			
			<div id="RIL_body">
			
				<div id="RIL_less">
				
				<!--STARTLESS--><div lang="en">



<p nodeindex="34"><strong nodeindex="265">1.0 Project overview</strong>  <br nodeindex="266">
1.1 What is JWT?  <br nodeindex="267">
1.2 Why do we need JWT?  <br nodeindex="268">
1.3 Where JWT is used?</p>
<p nodeindex="35"><strong nodeindex="269">2.0 File structure</strong></p>
<p nodeindex="36"><strong nodeindex="270">3.0 Setup the database</strong>  <br nodeindex="271">
3.1 Create a database  <br nodeindex="272">
3.2 Create a table  <br nodeindex="273">
3.3 Create a directory for configuration  <br nodeindex="274">
3.4 Create a database connection file</p>
<p nodeindex="37"><strong nodeindex="275">4.0 Create API for user registration</strong></p>
<p nodeindex="38"><strong nodeindex="276">5.0 Create API for user login</strong></p>
<p nodeindex="39"><strong nodeindex="277">6.0 Create API for JWT validation</strong></p>
<p nodeindex="40"><strong nodeindex="278">7.0 Create API for user account</strong></p>
<p nodeindex="41"><strong nodeindex="279">8.0 Create interface for user registration</strong></p>
<p nodeindex="42"><strong nodeindex="280">9.0 Create interface for user login</strong></p>
<p nodeindex="43"><strong nodeindex="281">10.0 Create interface for home page</strong></p>
<p nodeindex="44"><strong nodeindex="282">11.0 Create interface for account page</strong></p>
<p nodeindex="45"><strong nodeindex="283">12.0 Add a logout button</strong></p>
<p nodeindex="46">13.0 Download Source Codes  <br nodeindex="284">
14.0 What's Next?  <br nodeindex="285">
15.0 Related Tutorials  <br nodeindex="286">
16.0 Notes</p>
<p nodeindex="47">==========</p>
<h2 nodeindex="48">1.0 Project Overview</h2>
<p nodeindex="49">1.1 What is JWT?  <br nodeindex="287">
1.2 Why do we need JWT?  <br nodeindex="288">
1.3 Where JWT is used?</p>
<h2 nodeindex="50">2.0 File Structure</h2>
<p nodeindex="51">At the end of this tutorial, we will have the following folders and files.</p>
<p nodeindex="52">├─ rest-api-authentication-example/ - name of the project folder.  <br nodeindex="289">
├─── api/ - main folder of the API.  <br nodeindex="290">
├────── config/  <br nodeindex="291">
├───────── core.php - file used for common settings or variables.  <br nodeindex="292">
├───────── database.php - file used for connecting to the database.  <br nodeindex="293">
├────── libs/  <br nodeindex="294">
├───────── php-jwt-master/ - folder of jwt library developed by Google.  <br nodeindex="295">
├────── objects/  <br nodeindex="296">
├───────── user.php - class file that will handle the database queries.  <br nodeindex="297">
├────── create_user.php - file that will process the input of from "sign up" form.  <br nodeindex="298">
├────── login.php - file that will encode and generate a JSON web token.  <br nodeindex="299">
├────── update_user.php - file that will process the input of from "user account" form.  <br nodeindex="300">
├────── validate_token.php - file that will validate or decode the JSON web token.  <br nodeindex="301">
├─── custom.css - contains any customization in the user interface.  <br nodeindex="302">
├─── index.html - contains HTML and JavaScript that renders different user interfaces.</p>
<h2 nodeindex="53">3.0 Setup the Database</h2>
<h3 nodeindex="54">3.1 Create a database</h3>
<p nodeindex="55">Open your PhpMyAdmin <a href="http://localhost/phpmyadmin/" target="_blank" nodeindex="303" rel="noopener noreferrer">localhost/phpmyadmin</a> and create a database called <span class="coan_code" nodeindex="304">api_db</span></p>
<h3 nodeindex="56">3.2 Create a table</h3>
<p nodeindex="57">On the api_db database, create a new table called users.</p>
<p nodeindex="58">Put the following fields on the users table.</p>
<h3 nodeindex="59">3.3 Create a directory for configuration</h3>
<p nodeindex="60">Create our main project folder and put <span class="coan_code" nodeindex="305">rest-api-authentication-example</span> as its name.</p>
<p nodeindex="61">Inside that folder, create another folder called <span class="coan_code" nodeindex="306">config</span>.</p>
<h3 nodeindex="62">3.4 Create a database connection file</h3>
<p nodeindex="63">Open config folder. Create a new file called <span class="coan_code" nodeindex="307">database.php</span>.</p>
<p nodeindex="64">Place the following code.</p>
<pre class="brush: php; title: ; notranslate" title="" nodeindex="65">&lt;?php
// used to get mysql database connection
class Database{

        // specify your own database credentials
        private $host = "localhost";
        private $db_name = "api_db";
        private $username = "root";
        private $password = "";
        public $conn;

        // get the database connection
        public function getConnection(){

                $this-&gt;conn = null;

                try{
                        $this-&gt;conn = new PDO("mysql:host=" . $this-&gt;host . ";dbname=" . $this-&gt;db_name, $this-&gt;username, $this-&gt;password);
                }catch(PDOException $exception){
                        echo "Connection error: " . $exception-&gt;getMessage();
                }

                return $this-&gt;conn;
        }
}
?&gt;
</pre>
<h2 nodeindex="66">4.0 Create API for user registration</h2>
<p nodeindex="67">Open <span class="coan_code" nodeindex="308">rest-api-authentication-example</span> folder. Create a folder called <span class="coan_code" nodeindex="309">api</span>.</p>
<p nodeindex="68">Open the <span class="coan_code" nodeindex="310">api</span> folder. Create a new file called <span class="coan_code" nodeindex="311">create_user.php</span>.</p>
<p nodeindex="69">We need to set headers on this new file so that it will only accept JSON data.</p>
<p nodeindex="70">Place the following code.</p>
<pre class="brush: php; title: ; notranslate" title="" nodeindex="71">&lt;?php
// required headers
header("Access-Control-Allow-Origin: *");
header("Content-Type: application/json; charset=UTF-8");
header("Access-Control-Allow-Methods: POST");
header("Access-Control-Max-Age: 3600");
header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");

// database connection will be here
</pre>
<p nodeindex="72">Replace <span class="coan_comment" nodeindex="312">// database connection will be here</span> comment of <span class="coan_comment" nodeindex="313">create_user.php</span> file with the following code.</p>
<pre class="brush: php; title: ; notranslate" title="" nodeindex="73">// files needed to connect to database
include_once 'config/database.php';
include_once 'objects/user.php';

// get database connection
$database = new Database();
$db = $database-&gt;getConnection();

// instantiate product object
$user = new User($db);
</pre>
<pre class="brush: php; title: ; notranslate" title="" nodeindex="74">// get posted data
$data = json_decode(file_get_contents("php://input"));

// set product property values
$user-&gt;firstname = $data-&gt;firstname;
$user-&gt;lastname = $data-&gt;lastname;
$user-&gt;email = $data-&gt;email;
$user-&gt;password = $data-&gt;password;
</pre>
<pre class="brush: php; title: ; notranslate" title="" nodeindex="75">// create the user
if($user-&gt;create()){
    echo json_encode(array("message" =&gt; "User was created."));
}

// message if unable to create user
else{
    echo json_encode(array("message" =&gt; "Unable to create user."));
}
?&gt;
</pre>
<p nodeindex="76">The previous section will not work without the user 
object. Open the api folder. Open objects folder. Create a new file 
called user.php. Place the following code.</p>
<pre class="brush: php; title: ; notranslate" title="" nodeindex="77">&lt;?php
// 'user' object
class User{

    // database connection and table name
    private $conn;
    private $table_name = "users";

    // object properties
        public $id;
        public $firstname;
        public $lastname;
        public $email;
        public $password;

        // constructor
    public function __construct($db){
        $this-&gt;conn = $db;
    }

// create() method will be here
}
</pre>
<p nodeindex="78">Add the create() method by replacing the <span class="coan_code" nodeindex="314">// create() method will be here</span> comment with the following code.</p>
<pre class="brush: php; title: ; notranslate" title="" nodeindex="79">// create new user record
function create(){

    // insert query
    $query = "INSERT INTO " . $this-&gt;table_name . "
            SET
                                firstname = :firstname,
                                lastname = :lastname,
                                email = :email,
                                password = :password";

        // prepare the query
    $stmt = $this-&gt;conn-&gt;prepare($query);

        // sanitize
        $this-&gt;firstname=htmlspecialchars(strip_tags($this-&gt;firstname));
        $this-&gt;lastname=htmlspecialchars(strip_tags($this-&gt;lastname));
        $this-&gt;email=htmlspecialchars(strip_tags($this-&gt;email));
        $this-&gt;password=htmlspecialchars(strip_tags($this-&gt;password));

        // bind the values
    $stmt-&gt;bindParam(':firstname', $this-&gt;firstname);
    $stmt-&gt;bindParam(':lastname', $this-&gt;lastname);
    $stmt-&gt;bindParam(':email', $this-&gt;email);

        // hash the password before saving to database
        $password_hash = password_hash($this-&gt;password, PASSWORD_BCRYPT);
        $stmt-&gt;bindParam(':password', $password_hash);

        // execute the query, also check if query was successful
    if($stmt-&gt;execute()){
        return true;
    }

    return false;
}
</pre>
<h2 nodeindex="80">5.0 Create API for user login</h2>
<p nodeindex="81">Open <span class="coan_code" nodeindex="315">rest-api-authentication-example</span> folder. Open Create a new file called <span class="coan_code" nodeindex="316">login.php</span>.</p>
<pre class="brush: php; title: ; notranslate" title="" nodeindex="82">&lt;?php
// required headers
header("Access-Control-Allow-Origin: *");
header("Content-Type: application/json; charset=UTF-8");
header("Access-Control-Allow-Methods: POST");
header("Access-Control-Max-Age: 3600");
header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");
</pre>
<pre class="brush: php; title: ; notranslate" title="" nodeindex="83">// files needed to connect to database
include_once 'config/database.php';
include_once 'objects/user.php';

// get database connection
$database = new Database();
$db = $database-&gt;getConnection();

// instantiate user object
$user = new User($db);
</pre>
<pre class="brush: php; title: ; notranslate" title="" nodeindex="84">// get posted data
$data = json_decode(file_get_contents("php://input"));

// set product property values
$user-&gt;email = $data-&gt;email;
$email_exists = $user-&gt;emailExists();
</pre>
<pre class="brush: php; title: ; notranslate" title="" nodeindex="85">// generate json web token
include_once 'config/core.php';
include_once 'libs/php-jwt-master/src/BeforeValidException.php';
include_once 'libs/php-jwt-master/src/ExpiredException.php';
include_once 'libs/php-jwt-master/src/SignatureInvalidException.php';
include_once 'libs/php-jwt-master/src/JWT.php';
use \Firebase\JWT\JWT;
</pre>
<pre class="brush: php; title: ; notranslate" title="" nodeindex="86">if($email_exists &amp;&amp; password_verify($data-&gt;password, $user-&gt;password)){

    $token = array(
       "iss" =&gt; $iss,
       "aud" =&gt; $aud,
       "iat" =&gt; $iat,
       "nbf" =&gt; $nbf,
       "data" =&gt; array(
           "id" =&gt; $user-&gt;id,
           "firstname" =&gt; $user-&gt;firstname,
           "lastname" =&gt; $user-&gt;lastname,
           "email" =&gt; $user-&gt;email
       )
    );

    $jwt = JWT::encode($token, $key);
    echo json_encode(
            array(
                "message" =&gt; "Successful login.",
                "jwt" =&gt; $jwt
            )
        );

}

// login failed
else{
    echo json_encode(array("message" =&gt; "Login failed."));
}
?&gt;
</pre>
<p nodeindex="87">The login.php file will not work without the core.php 
file. Open the api folder. Open the config folder. Create a new file 
called core.php. Place the following code.</p>
<pre class="brush: php; title: ; notranslate" title="" nodeindex="88">&lt;?php
// show error reporting
error_reporting(E_ALL);

// set your default time-zone
date_default_timezone_set('Asia/Manila');

// key used for jwt
$key = "example_key";
$iss = "http://example.org";
$aud = "http://example.com";
$iat = 1356999524;
$nbf = 1357000000;
?&gt;
</pre>
<h2 nodeindex="89">6.0 Create API for JWT validation</h2>
<p nodeindex="90">Open api folder. Create validate_token.php file. Place the following code.</p>
<pre class="brush: php; title: ; notranslate" title="" nodeindex="91">&lt;?php
// required headers
header("Access-Control-Allow-Origin: *");
header("Content-Type: application/json; charset=UTF-8");
header("Access-Control-Allow-Methods: POST");
header("Access-Control-Max-Age: 3600");
header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");

// required to decode jwt
include_once 'config/core.php';
include_once 'libs/php-jwt-master/src/BeforeValidException.php';
include_once 'libs/php-jwt-master/src/ExpiredException.php';
include_once 'libs/php-jwt-master/src/SignatureInvalidException.php';
include_once 'libs/php-jwt-master/src/JWT.php';
use \Firebase\JWT\JWT;

// get posted data
$jwt=isset($_POST['jwt']) ? $_POST['jwt'] : "";

// if jwt is not empty
if($jwt){

    // if decode succeed, show user details
    try {
        // decode jwt
        $decoded = JWT::decode($jwt, $key, array('HS256'));

        // show user details
        echo json_encode(array(
            "message" =&gt; "Access granted.",
            "data" =&gt; $decoded-&gt;data
        ));
    }

    // if decode fails, it means jwt is invalid
    catch (PDOException $e){

        // show error message
        echo json_encode(array(
            "message" =&gt; "Access denied.",
            "error" =&gt; $e-&gt;getMessage()
        ));
    }
}

// show error message if jwt is empty
else{
    echo json_encode(array(
        "message" =&gt; "Access denied."
    ));
}
?&gt;
</pre>








</div>
				<!--ENDLESS-->
				
				</div>
				
			</div>
		
		</div>
		
	</div></div></div></div></div></div><div id="extwaiimpotscp" style="display:none" v="{20a1" f="ZXpJd1lURTFZVGMwTFRNM01XWXROVEE1T0MxaE16WXlMV0prTVRJM1pHSTBaamhpWTMwPQ==" q="c2e841a0" c="3.095" i="9.362" u="1.465" s="19060320" w="false" m="BMe=" vn="0qeve"></div></div><script>!function(c){function e(e){for(var r,t,n=e[0],o=e[1],u=e[2],i=0,a=[];i<n.length;i++)t=n[i],l[t]&&a.push(l[t][0]),l[t]=0;for(r in o)Object.prototype.hasOwnProperty.call(o,r)&&(c[r]=o[r]);for(d&&d(e);a.length;)a.shift()();return p.push.apply(p,u||[]),f()}function f(){for(var e,r=0;r<p.length;r++){for(var t=p[r],n=!0,o=1;o<t.length;o++){var u=t[o];0!==l[u]&&(n=!1)}n&&(p.splice(r--,1),e=s(s.s=t[0]))}return e}var t={},l={4:0},p=[];function s(e){if(t[e])return t[e].exports;var r=t[e]={i:e,l:!1,exports:{}};return c[e].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.e=function(u){var e=[],t=l[u];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise(function(e,r){t=l[u]=[e,r]});e.push(t[2]=r);var n,i=document.createElement("script");i.charset="utf-8",i.timeout=120,s.nc&&i.setAttribute("nonce",s.nc),i.src=s.p+"static/js/"+({}[u]||u)+"."+{0:"677def4b",1:"c2daeb48",2:"b5c89af4",6:"7ed8408b",7:"cc2017bc",8:"12e7036c",9:"c1641128",10:"435a867c",11:"3ee7aa6d"}[u]+".chunk.js",n=function(e){i.onerror=i.onload=null,clearTimeout(a);var r=l[u];if(0!==r){if(r){var t=e&&("load"===e.type?"missing":e.type),n=e&&e.target&&e.target.src,o=new Error("Loading chunk "+u+" failed.\n("+t+": "+n+")");o.type=t,o.request=n,r[1](o)}l[u]=void 0}};var a=setTimeout(function(){n({type:"timeout",target:i})},12e4);i.onerror=i.onload=n,document.head.appendChild(i)}return Promise.all(e)},s.m=c,s.c=t,s.d=function(e,r,t){s.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(r,e){if(1&e&&(r=s(r)),8&e)return r;if(4&e&&"object"==typeof r&&r&&r.__esModule)return r;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:r}),2&e&&"string"!=typeof r)for(var n in r)s.d(t,n,function(e){return r[e]}.bind(null,n));return t},s.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(r,"a",r),r},s.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},s.p="/",s.oe=function(e){throw console.error(e),e};var r=window.webpackJsonp=window.webpackJsonp||[],n=r.push.bind(r);r.push=e,r=r.slice();for(var o=0;o<r.length;o++)e(r[o]);var d=n;f()}([])</script><script src="user.php_files/5.js"></script><script src="user.php_files/main.js"></script></body></html>